name: opv2v_point_pillar_lidar_v2vnet
data_dir: "/remote-home/share/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure"
root_dir: "/remote-home/share/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/remote-home/share/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure/val.json"
test_dir: "/remote-home/share/my_dair_v2x/v2x_c/cooperative-vehicle-infrastructure/val.json"


yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 4
  epoches: 60
  eval_freq: 4
  save_freq: 4
  max_cav: &max_cav 5

time_delay: 3 # 10Hz time_delay: 5=500ms

input_source: ['lidar']
label_type: 'lidar'

comm_range: 1000000
num_sweep_frames: &num_sweep_frames 1

fusion:
  core_method: 'intermediate'
  dataset: 'dairv2x'
  args: 
    clip_pc: false
    proj_first: false

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-100.8, -40, -3, 100.8, 40, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess: &postprocess_params
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    D: 1
    H: 200
    W: 504
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: &anchor_yaw [0,90]
    vd: 4
    vh: 0.4
    vw: 0.4
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.4
  order: 'hwl' # hwl or lwh
  max_num: &max_num 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 1
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: point_pillar_v2vnet_robust
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *anchor_num
    compression: 0
    max_cav: 2
    backbone_fix: false
    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64
    robust:
      H: 100
      W: 252
      discrete_ratio: 0.4
      downsample_rate: 2
      feature_dim: 256
      hidden_dim: 256
    base_bev_backbone: # backbone will downsample 2x
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]

    shrink_header:
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3
    stage: 2
    dir_args: *dir_args

    fusion_method: v2vfusion

    v2vfusion:
      num_iteration: 2
      in_channels: 384
      gru_flag: true
      agg_operator: weight
      conv_gru:
        H: 100
        W: 252
        num_layers: 1
        kernel_size: [[3,3]]
      downsample_rate: 2
      gru_flag: true
      in_channels: 256
      num_iteration: 2
      voxel_size: [0.4,0.4,4]
loss:
  core_method: point_pillar_v2v_robust_loss
  args:
    cls_weight: 1.0
    pose_weight: 0.8
    reg: 2.0
    score_weight: 0.2

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 15, 20]

